// Script pour corriger la contrainte de cl√© √©trang√®re assignedPrestataireId
const mysql = require('mysql2/promise');

async function fixPrestataireForeignKey() {
    const connection = await mysql.createConnection({
        host: 'localhost',
        user: 'root',
        password: '', // Mot de passe vide par d√©faut
        database: 'edor_mobile'
    });

    try {
        console.log('üîß Correction de la contrainte de cl√© √©trang√®re assignedPrestataireId...');

        // D√©sactiver les v√©rifications de cl√©s √©trang√®res
        await connection.execute('SET FOREIGN_KEY_CHECKS = 0');
        console.log('‚úÖ V√©rifications de cl√©s √©trang√®res d√©sactiv√©es');

        // Supprimer l'ancienne contrainte
        try {
            await connection.execute('ALTER TABLE service_requests DROP FOREIGN KEY FK_75cfadf75fb1477c26a9921d050');
            console.log('‚úÖ Ancienne contrainte supprim√©e');
        } catch (error) {
            console.log('‚ö†Ô∏è  Ancienne contrainte non trouv√©e ou d√©j√† supprim√©e');
        }

        // Ajouter la nouvelle contrainte vers la table prestataires
        await connection.execute(`
      ALTER TABLE service_requests 
      ADD CONSTRAINT FK_service_requests_assigned_prestataire 
      FOREIGN KEY (assignedPrestataireId) REFERENCES prestataires(id) 
      ON DELETE SET NULL ON UPDATE CASCADE
    `);
        console.log('‚úÖ Nouvelle contrainte ajout√©e vers la table prestataires');

        // R√©activer les v√©rifications de cl√©s √©trang√®res
        await connection.execute('SET FOREIGN_KEY_CHECKS = 1');
        console.log('‚úÖ V√©rifications de cl√©s √©trang√®res r√©activ√©es');

        console.log('üéâ Correction termin√©e avec succ√®s !');

    } catch (error) {
        console.error('‚ùå Erreur lors de la correction:', error.message);
    } finally {
        await connection.end();
    }
}

fixPrestataireForeignKey();